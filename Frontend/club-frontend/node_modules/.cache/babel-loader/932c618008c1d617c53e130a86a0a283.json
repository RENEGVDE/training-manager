{"ast":null,"code":"var _jsxFileName = \"D:\\\\RENEGVDE\\\\UNIVER\\\\ITS3\\\\Project\\\\Club Management\\\\Frontend\\\\club-frontend\\\\src\\\\components\\\\Exercise.js\";\nimport React, { Component } from 'react';\nimport { Card, Form, Button, Col } from 'react-bootstrap';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faPlusSquare, faSave, faUndo, faList, faEdit } from '@fortawesome/free-solid-svg-icons';\nimport MyToast from './MyToast';\nimport axios from 'axios';\nimport { connect } from 'react-redux';\nimport { saveExercise } from '../services/index';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Exercise extends Component {\n  constructor(props) {\n    super(props);\n    this.initialState = {\n      id: '',\n      trName: '',\n      trDuration: '',\n      trPosition: '',\n      totCalories: ''\n    };\n\n    this.findExerciseById = exerciseId => {\n      axios.get(\"http://localhost:8081/rest/exercise/\" + exerciseId).then(response => {\n        if (response.data != null) {\n          this.setState({\n            id: response.data.id,\n            trName: response.data.trName,\n            trDuration: response.data.trDuration,\n            trPosition: response.data.trPosition,\n            totCalories: response.data.totCalories\n          });\n        }\n      }).catch(error => {\n        console.error(\"Error - \" + error);\n      });\n    };\n\n    this.resetExercise = () => {\n      this.setState(() => this.initialState);\n    };\n\n    this.submitExercise = event => {\n      event.preventDefault();\n      const exercise = {\n        trName: this.state.trName,\n        trDuration: this.state.trDuration,\n        trPosition: this.state.trPosition,\n        totCalories: this.state.totCalories\n      }; // axios.post(\"http://localhost:8081/rest/exercise\", exercise)\n      //     .then(response => {\n      //         if(response.data != null) {\n      //             this.setState({\"show\":true, \"method\":\"post\"});\n      //             setTimeout(() => this.setState({\"show\":false}), 3000);\n      //         } else {\n      //             this.setState({\"show\":false});\n      //         }\n      //     });\n\n      this.props.saveExercise(exercise);\n      setTimeout(() => {\n        if (this.props.exerciseObject.exercise != null) {\n          this.setState({\n            \"show\": true,\n            \"method\": \"post\"\n          });\n          setTimeout(() => this.setState({\n            \"show\": false\n          }), 3000);\n        } else {\n          this.setState({\n            \"show\": false\n          });\n        }\n      }, 2000);\n      this.setState(this.initialState);\n    };\n\n    this.updateExercise = event => {\n      event.preventDefault();\n      const exercise = {\n        id: this.state.id,\n        trName: this.state.trName,\n        trDuration: this.state.trDuration,\n        trPosition: this.state.trPosition,\n        totCalories: this.state.totCalories\n      };\n      axios.put(\"http://localhost:8081/rest/exercise\", exercise).then(response => {\n        if (response.data != null) {\n          this.setState({\n            \"show\": true,\n            \"method\": \"put\"\n          });\n          setTimeout(() => this.setState({\n            \"show\": false\n          }), 3000);\n          setTimeout(() => this.exerciseList(), 3000);\n        } else {\n          this.setState({\n            \"show\": false\n          });\n        }\n      });\n      this.setState(this.initialState);\n    };\n\n    this.exerciseChange = event => {\n      this.setState({\n        [event.target.name]: event.target.value\n      });\n    };\n\n    this.exerciseList = () => {\n      return this.props.history.push(\"/list\");\n    };\n\n    this.state = this.initialState;\n    this.state.show = false;\n    this.exerciseChange = this.exerciseChange.bind(this);\n    this.submitExercise = this.submitExercise.bind(this);\n  } // submitExercise(event){\n  //     alert(\n  //         'Name: '+this.state.nameEx+ \n  //         ', Duration: '+this.state.durationEx+\n  //         ', Position: '+this.state.positionEx+\n  //         ', Coach: '+this.state.coachEx    \n  //     );\n  //     event.preventDefault();\n  // }\n\n\n  componentDidMount() {\n    const exerciseId = +this.props.match.params.id;\n\n    if (exerciseId) {\n      this.findExerciseById(exerciseId);\n    }\n  }\n\n  render() {\n    const {\n      trName,\n      trDuration,\n      trPosition,\n      totCalories\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          \"display\": this.state.show ? \"block\" : \"none\"\n        },\n        children: /*#__PURE__*/_jsxDEV(MyToast, {\n          show: this.state.show,\n          message: this.state.method === \"put\" ? \"Exercise Updated Successfully.\" : \"Exercise Saved Successfully.\",\n          type: \"success\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 190,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 189,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Card, {\n        className: \"border border-dark bg-dark text-white\",\n        children: [/*#__PURE__*/_jsxDEV(Card.Header, {\n          children: [/*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n            icon: this.state.id ? faEdit : faPlusSquare\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 194,\n            columnNumber: 21\n          }, this), \" \", this.state.id ? \"Update Exercise\" : \"Add Exercise\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 193,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Form, {\n          onReset: this.resetExercise,\n          onSubmit: this.state.id ? this.updateExercise : this.submitExercise,\n          id: \"exerciseFormId\",\n          children: [/*#__PURE__*/_jsxDEV(Card.Body, {\n            children: [/*#__PURE__*/_jsxDEV(Form.Row, {\n              children: [/*#__PURE__*/_jsxDEV(Form.Group, {\n                as: Col,\n                controlId: \"formGridName\",\n                children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n                  children: \"Exercise Name\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 200,\n                  columnNumber: 37\n                }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n                  required: true,\n                  autoComplete: \"off\",\n                  type: \"text\",\n                  name: \"trName\",\n                  value: trName,\n                  onChange: this.exerciseChange,\n                  className: \"bg-dark text-white\",\n                  placeholder: \"Exercise Name\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 201,\n                  columnNumber: 37\n                }, this), /*#__PURE__*/_jsxDEV(Form.Text, {\n                  className: \"text-muted\",\n                  children: \"Enter the exercise name.\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 205,\n                  columnNumber: 37\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 199,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n                as: Col,\n                controlId: \"formGridDuration\",\n                children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n                  children: \"Exercise Duration\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 210,\n                  columnNumber: 37\n                }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n                  required: true,\n                  autoComplete: \"off\",\n                  type: \"number\",\n                  name: \"trDuration\",\n                  value: trDuration,\n                  onChange: this.exerciseChange,\n                  className: \"bg-dark text-white\",\n                  placeholder: \"Exercise Duration\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 211,\n                  columnNumber: 37\n                }, this), /*#__PURE__*/_jsxDEV(Form.Text, {\n                  className: \"text-muted\",\n                  children: \"Enter the exercise duration.\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 215,\n                  columnNumber: 37\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 209,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 198,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Form.Row, {\n              children: /*#__PURE__*/_jsxDEV(Form.Group, {\n                as: Col,\n                controlId: \"formGridPosition\",\n                children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n                  children: \"Player Position\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 222,\n                  columnNumber: 37\n                }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n                  required: true,\n                  autoComplete: \"off\",\n                  type: \"text\",\n                  name: \"trPosition\",\n                  value: trPosition,\n                  onChange: this.exerciseChange,\n                  className: \"bg-dark text-white\",\n                  placeholder: \"Player Position\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 223,\n                  columnNumber: 37\n                }, this), /*#__PURE__*/_jsxDEV(Form.Text, {\n                  className: \"text-muted\",\n                  children: \"Enter the player position for this exercise.\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 227,\n                  columnNumber: 37\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 221,\n                columnNumber: 33\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 220,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 197,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Card.Footer, {\n            style: {\n              \"textAlign\": \"right\"\n            },\n            children: [/*#__PURE__*/_jsxDEV(Button, {\n              variant: \"success\",\n              type: \"submit\",\n              children: [/*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n                icon: faSave\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 245,\n                columnNumber: 33\n              }, this), \" \", this.state.id ? \"Update\" : \"Save\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 244,\n              columnNumber: 29\n            }, this), ' ', /*#__PURE__*/_jsxDEV(Button, {\n              variant: \"info\",\n              type: \"reset\",\n              onClick: this.exerciseList.bind(),\n              children: [/*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n                icon: faList\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 248,\n                columnNumber: 33\n              }, this), \" Training\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 247,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 243,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 196,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 192,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 188,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\n;\n\nconst mapStateToProps = state => {\n  return {\n    exerciseObject: state.exercise\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    saveExercise: exercise => dispatch(saveExercise(exercise))\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Exercise);","map":{"version":3,"sources":["D:/RENEGVDE/UNIVER/ITS3/Project/Club Management/Frontend/club-frontend/src/components/Exercise.js"],"names":["React","Component","Card","Form","Button","Col","FontAwesomeIcon","faPlusSquare","faSave","faUndo","faList","faEdit","MyToast","axios","connect","saveExercise","Exercise","constructor","props","initialState","id","trName","trDuration","trPosition","totCalories","findExerciseById","exerciseId","get","then","response","data","setState","catch","error","console","resetExercise","submitExercise","event","preventDefault","exercise","state","setTimeout","exerciseObject","updateExercise","put","exerciseList","exerciseChange","target","name","value","history","push","show","bind","componentDidMount","match","params","render","method","mapStateToProps","mapDispatchToProps","dispatch"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AAEA,SAAQC,IAAR,EAAcC,IAAd,EAAoBC,MAApB,EAA4BC,GAA5B,QAAsC,iBAAtC;AACA,SAAQC,eAAR,QAA8B,gCAA9B;AACA,SAAQC,YAAR,EAAsBC,MAAtB,EAA8BC,MAA9B,EAAsCC,MAAtC,EAA8CC,MAA9C,QAA2D,mCAA3D;AACA,OAAOC,OAAP,MAAoB,WAApB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAAQC,OAAR,QAAsB,aAAtB;AACA,SAAQC,YAAR,QAA2B,mBAA3B;;;AAEA,MAAMC,QAAN,SAAuBf,SAAvB,CAAiC;AAE7BgB,EAAAA,WAAW,CAACC,KAAD,EAAO;AACd,UAAMA,KAAN;AADc,SAkBlBC,YAlBkB,GAkBL;AACTC,MAAAA,EAAE,EAAC,EADM;AAETC,MAAAA,MAAM,EAAC,EAFE;AAGTC,MAAAA,UAAU,EAAC,EAHF;AAITC,MAAAA,UAAU,EAAC,EAJF;AAKTC,MAAAA,WAAW,EAAC;AALH,KAlBK;;AAAA,SAiClBC,gBAjCkB,GAiCAC,UAAD,IAAc;AAC3Bb,MAAAA,KAAK,CAACc,GAAN,CAAU,yCAAuCD,UAAjD,EACKE,IADL,CACUC,QAAQ,IAAI;AACd,YAAGA,QAAQ,CAACC,IAAT,IAAiB,IAApB,EAA0B;AACtB,eAAKC,QAAL,CAAc;AACVX,YAAAA,EAAE,EAAES,QAAQ,CAACC,IAAT,CAAcV,EADR;AAEVC,YAAAA,MAAM,EAAEQ,QAAQ,CAACC,IAAT,CAAcT,MAFZ;AAGVC,YAAAA,UAAU,EAAEO,QAAQ,CAACC,IAAT,CAAcR,UAHhB;AAIVC,YAAAA,UAAU,EAAEM,QAAQ,CAACC,IAAT,CAAcP,UAJhB;AAKVC,YAAAA,WAAW,EAAEK,QAAQ,CAACC,IAAT,CAAcN;AALjB,WAAd;AAOH;AACJ,OAXL,EAWOQ,KAXP,CAWcC,KAAD,IAAW;AAChBC,QAAAA,OAAO,CAACD,KAAR,CAAc,aAAWA,KAAzB;AACH,OAbL;AAcH,KAhDiB;;AAAA,SAoElBE,aApEkB,GAoEF,MAAM;AAClB,WAAKJ,QAAL,CAAc,MAAM,KAAKZ,YAAzB;AACH,KAtEiB;;AAAA,SAwElBiB,cAxEkB,GAwEDC,KAAK,IAAI;AACtBA,MAAAA,KAAK,CAACC,cAAN;AAEA,YAAMC,QAAQ,GAAG;AACblB,QAAAA,MAAM,EAAE,KAAKmB,KAAL,CAAWnB,MADN;AAEbC,QAAAA,UAAU,EAAE,KAAKkB,KAAL,CAAWlB,UAFV;AAGbC,QAAAA,UAAU,EAAE,KAAKiB,KAAL,CAAWjB,UAHV;AAIbC,QAAAA,WAAW,EAAE,KAAKgB,KAAL,CAAWhB;AAJX,OAAjB,CAHsB,CAUtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,WAAKN,KAAL,CAAWH,YAAX,CAAwBwB,QAAxB;AACAE,MAAAA,UAAU,CAAC,MAAM;AACb,YAAG,KAAKvB,KAAL,CAAWwB,cAAX,CAA0BH,QAA1B,IAAsC,IAAzC,EAA+C;AAC3C,eAAKR,QAAL,CAAc;AAAC,oBAAO,IAAR;AAAc,sBAAS;AAAvB,WAAd;AACAU,UAAAA,UAAU,CAAC,MAAM,KAAKV,QAAL,CAAc;AAAC,oBAAO;AAAR,WAAd,CAAP,EAAsC,IAAtC,CAAV;AACH,SAHD,MAGO;AACH,eAAKA,QAAL,CAAc;AAAC,oBAAO;AAAR,WAAd;AACH;AACJ,OAPS,EAOP,IAPO,CAAV;AASA,WAAKA,QAAL,CAAc,KAAKZ,YAAnB;AACH,KAvGiB;;AAAA,SAwIlBwB,cAxIkB,GAwIDN,KAAK,IAAI;AACtBA,MAAAA,KAAK,CAACC,cAAN;AAEA,YAAMC,QAAQ,GAAG;AACbnB,QAAAA,EAAE,EAAE,KAAKoB,KAAL,CAAWpB,EADF;AAEbC,QAAAA,MAAM,EAAE,KAAKmB,KAAL,CAAWnB,MAFN;AAGbC,QAAAA,UAAU,EAAE,KAAKkB,KAAL,CAAWlB,UAHV;AAIbC,QAAAA,UAAU,EAAE,KAAKiB,KAAL,CAAWjB,UAJV;AAKbC,QAAAA,WAAW,EAAE,KAAKgB,KAAL,CAAWhB;AALX,OAAjB;AAQAX,MAAAA,KAAK,CAAC+B,GAAN,CAAU,qCAAV,EAAiDL,QAAjD,EACKX,IADL,CACUC,QAAQ,IAAI;AACd,YAAGA,QAAQ,CAACC,IAAT,IAAiB,IAApB,EAA0B;AACtB,eAAKC,QAAL,CAAc;AAAC,oBAAO,IAAR;AAAc,sBAAS;AAAvB,WAAd;AACAU,UAAAA,UAAU,CAAC,MAAM,KAAKV,QAAL,CAAc;AAAC,oBAAO;AAAR,WAAd,CAAP,EAAsC,IAAtC,CAAV;AACAU,UAAAA,UAAU,CAAC,MAAM,KAAKI,YAAL,EAAP,EAA4B,IAA5B,CAAV;AACH,SAJD,MAIO;AACH,eAAKd,QAAL,CAAc;AAAC,oBAAO;AAAR,WAAd;AACH;AACJ,OATL;AAWA,WAAKA,QAAL,CAAc,KAAKZ,YAAnB;AACH,KA/JiB;;AAAA,SAiKlB2B,cAjKkB,GAiKHT,KAAK,IAAE;AAClB,WAAKN,QAAL,CAAc;AACV,SAACM,KAAK,CAACU,MAAN,CAAaC,IAAd,GAAoBX,KAAK,CAACU,MAAN,CAAaE;AADvB,OAAd;AAGH,KArKiB;;AAAA,SAuKlBJ,YAvKkB,GAuKH,MAAM;AACjB,aAAO,KAAK3B,KAAL,CAAWgC,OAAX,CAAmBC,IAAnB,CAAwB,OAAxB,CAAP;AACH,KAzKiB;;AAEd,SAAKX,KAAL,GAAa,KAAKrB,YAAlB;AACA,SAAKqB,KAAL,CAAWY,IAAX,GAAkB,KAAlB;AACA,SAAKN,cAAL,GAAoB,KAAKA,cAAL,CAAoBO,IAApB,CAAyB,IAAzB,CAApB;AACA,SAAKjB,cAAL,GAAoB,KAAKA,cAAL,CAAoBiB,IAApB,CAAyB,IAAzB,CAApB;AACH,GAR4B,CAU7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAUAC,EAAAA,iBAAiB,GAAG;AAChB,UAAM5B,UAAU,GAAG,CAAC,KAAKR,KAAL,CAAWqC,KAAX,CAAiBC,MAAjB,CAAwBpC,EAA5C;;AACA,QAAGM,UAAH,EAAe;AACX,WAAKD,gBAAL,CAAsBC,UAAtB;AACH;AACJ;;AA4ID+B,EAAAA,MAAM,GAAE;AACJ,UAAK;AAACpC,MAAAA,MAAD;AAASC,MAAAA,UAAT;AAAqBC,MAAAA,UAArB;AAAiCC,MAAAA;AAAjC,QAA8C,KAAKgB,KAAxD;AAEA,wBACI;AAAA,8BACI;AAAK,QAAA,KAAK,EAAE;AAAC,qBAAU,KAAKA,KAAL,CAAWY,IAAX,GAAkB,OAAlB,GAA4B;AAAvC,SAAZ;AAAA,+BACA,QAAC,OAAD;AAAS,UAAA,IAAI,EAAI,KAAKZ,KAAL,CAAWY,IAA5B;AAAkC,UAAA,OAAO,EAAI,KAAKZ,KAAL,CAAWkB,MAAX,KAAsB,KAAtB,GAA8B,gCAA9B,GAAiE,8BAA9G;AAA8I,UAAA,IAAI,EAAI;AAAtJ;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA,cADJ,eAII,QAAC,IAAD;AAAM,QAAA,SAAS,EAAE,uCAAjB;AAAA,gCACI,QAAC,IAAD,CAAM,MAAN;AAAA,kCACA,QAAC,eAAD;AAAiB,YAAA,IAAI,EAAE,KAAKlB,KAAL,CAAWpB,EAAX,GAAgBT,MAAhB,GAAyBJ;AAAhD;AAAA;AAAA;AAAA;AAAA,kBADA,OACkE,KAAKiC,KAAL,CAAWpB,EAAX,GAAgB,iBAAhB,GAAoC,cADtG;AAAA;AAAA;AAAA;AAAA;AAAA,gBADJ,eAII,QAAC,IAAD;AAAM,UAAA,OAAO,EAAE,KAAKe,aAApB;AAAmC,UAAA,QAAQ,EAAE,KAAKK,KAAL,CAAWpB,EAAX,GAAgB,KAAKuB,cAArB,GAAsC,KAAKP,cAAxF;AAAwG,UAAA,EAAE,EAAC,gBAA3G;AAAA,kCACI,QAAC,IAAD,CAAM,IAAN;AAAA,oCACI,QAAC,IAAD,CAAM,GAAN;AAAA,sCACI,QAAC,IAAD,CAAM,KAAN;AAAY,gBAAA,EAAE,EAAE/B,GAAhB;AAAqB,gBAAA,SAAS,EAAC,cAA/B;AAAA,wCACI,QAAC,IAAD,CAAM,KAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBADJ,eAEI,QAAC,IAAD,CAAM,OAAN;AAAc,kBAAA,QAAQ,MAAtB;AAAuB,kBAAA,YAAY,EAAC,KAApC;AAA0C,kBAAA,IAAI,EAAC,MAA/C;AAAsD,kBAAA,IAAI,EAAC,QAA3D;AACA,kBAAA,KAAK,EAAEgB,MADP;AAEA,kBAAA,QAAQ,EAAE,KAAKyB,cAFf;AAGA,kBAAA,SAAS,EAAE,oBAHX;AAGiC,kBAAA,WAAW,EAAC;AAH7C;AAAA;AAAA;AAAA;AAAA,wBAFJ,eAMI,QAAC,IAAD,CAAM,IAAN;AAAW,kBAAA,SAAS,EAAC,YAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBANJ;AAAA;AAAA;AAAA;AAAA;AAAA,sBADJ,eAWI,QAAC,IAAD,CAAM,KAAN;AAAY,gBAAA,EAAE,EAAEzC,GAAhB;AAAqB,gBAAA,SAAS,EAAC,kBAA/B;AAAA,wCACI,QAAC,IAAD,CAAM,KAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBADJ,eAEI,QAAC,IAAD,CAAM,OAAN;AAAc,kBAAA,QAAQ,MAAtB;AAAuB,kBAAA,YAAY,EAAC,KAApC;AAA0C,kBAAA,IAAI,EAAC,QAA/C;AAAwD,kBAAA,IAAI,EAAC,YAA7D;AACA,kBAAA,KAAK,EAAEiB,UADP;AAEA,kBAAA,QAAQ,EAAE,KAAKwB,cAFf;AAGA,kBAAA,SAAS,EAAE,oBAHX;AAGiC,kBAAA,WAAW,EAAC;AAH7C;AAAA;AAAA;AAAA;AAAA,wBAFJ,eAMI,QAAC,IAAD,CAAM,IAAN;AAAW,kBAAA,SAAS,EAAC,YAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBANJ;AAAA;AAAA;AAAA;AAAA;AAAA,sBAXJ;AAAA;AAAA;AAAA;AAAA;AAAA,oBADJ,eAuBI,QAAC,IAAD,CAAM,GAAN;AAAA,qCACI,QAAC,IAAD,CAAM,KAAN;AAAY,gBAAA,EAAE,EAAEzC,GAAhB;AAAqB,gBAAA,SAAS,EAAC,kBAA/B;AAAA,wCACI,QAAC,IAAD,CAAM,KAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBADJ,eAEI,QAAC,IAAD,CAAM,OAAN;AAAc,kBAAA,QAAQ,MAAtB;AAAuB,kBAAA,YAAY,EAAC,KAApC;AAA0C,kBAAA,IAAI,EAAC,MAA/C;AAAsD,kBAAA,IAAI,EAAC,YAA3D;AACA,kBAAA,KAAK,EAAEkB,UADP;AAEA,kBAAA,QAAQ,EAAE,KAAKuB,cAFf;AAGA,kBAAA,SAAS,EAAE,oBAHX;AAGiC,kBAAA,WAAW,EAAC;AAH7C;AAAA;AAAA;AAAA;AAAA,wBAFJ,eAMI,QAAC,IAAD,CAAM,IAAN;AAAW,kBAAA,SAAS,EAAC,YAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBANJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,oBAvBJ;AAAA;AAAA;AAAA;AAAA;AAAA,kBADJ,eA+CI,QAAC,IAAD,CAAM,MAAN;AAAa,YAAA,KAAK,EAAE;AAAC,2BAAY;AAAb,aAApB;AAAA,oCACI,QAAC,MAAD;AAAQ,cAAA,OAAO,EAAC,SAAhB;AAA0B,cAAA,IAAI,EAAC,QAA/B;AAAA,sCACI,QAAC,eAAD;AAAiB,gBAAA,IAAI,EAAEtC;AAAvB;AAAA;AAAA;AAAA;AAAA,sBADJ,OACuC,KAAKgC,KAAL,CAAWpB,EAAX,GAAgB,QAAhB,GAA2B,MADlE;AAAA;AAAA;AAAA;AAAA;AAAA,oBADJ,EAGc,GAHd,eAII,QAAC,MAAD;AAAQ,cAAA,OAAO,EAAC,MAAhB;AAAuB,cAAA,IAAI,EAAC,OAA5B;AAAoC,cAAA,OAAO,EAAE,KAAKyB,YAAL,CAAkBQ,IAAlB,EAA7C;AAAA,sCACI,QAAC,eAAD;AAAiB,gBAAA,IAAI,EAAE3C;AAAvB;AAAA;AAAA;AAAA;AAAA,sBADJ;AAAA;AAAA;AAAA;AAAA;AAAA,oBAJJ;AAAA;AAAA;AAAA;AAAA;AAAA,kBA/CJ;AAAA;AAAA;AAAA;AAAA;AAAA,gBAJJ;AAAA;AAAA;AAAA;AAAA;AAAA,cAJJ;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ;AAoEH;;AApP4B;;AAqPhC;;AAED,MAAMiD,eAAe,GAAGnB,KAAK,IAAI;AAC7B,SAAO;AACHE,IAAAA,cAAc,EAAEF,KAAK,CAACD;AADnB,GAAP;AAGH,CAJD;;AAMA,MAAMqB,kBAAkB,GAAGC,QAAQ,IAAI;AACnC,SAAO;AACH9C,IAAAA,YAAY,EAAGwB,QAAD,IAAcsB,QAAQ,CAAC9C,YAAY,CAACwB,QAAD,CAAb;AADjC,GAAP;AAGH,CAJD;;AAMA,eAAezB,OAAO,CAAC6C,eAAD,EAAkBC,kBAAlB,CAAP,CAA6C5C,QAA7C,CAAf","sourcesContent":["import React, { Component } from 'react'\r\n\r\nimport {Card, Form, Button, Col} from 'react-bootstrap';\r\nimport {FontAwesomeIcon} from '@fortawesome/react-fontawesome'\r\nimport {faPlusSquare, faSave, faUndo, faList, faEdit} from '@fortawesome/free-solid-svg-icons'\r\nimport MyToast from './MyToast';\r\nimport axios from 'axios';\r\nimport {connect} from 'react-redux';\r\nimport {saveExercise} from '../services/index';\r\n\r\nclass Exercise extends Component {\r\n\r\n    constructor(props){\r\n        super(props);\r\n        this.state = this.initialState;\r\n        this.state.show = false;\r\n        this.exerciseChange=this.exerciseChange.bind(this);\r\n        this.submitExercise=this.submitExercise.bind(this);\r\n    }\r\n\r\n    // submitExercise(event){\r\n    //     alert(\r\n    //         'Name: '+this.state.nameEx+ \r\n    //         ', Duration: '+this.state.durationEx+\r\n    //         ', Position: '+this.state.positionEx+\r\n    //         ', Coach: '+this.state.coachEx    \r\n    //     );\r\n    //     event.preventDefault();\r\n    // }\r\n\r\n    initialState={\r\n        id:'',\r\n        trName:'',\r\n        trDuration:'',\r\n        trPosition:'',\r\n        totCalories:''\r\n    };\r\n\r\n    componentDidMount() {\r\n        const exerciseId = +this.props.match.params.id;\r\n        if(exerciseId) {\r\n            this.findExerciseById(exerciseId);\r\n        }\r\n    }\r\n\r\n    findExerciseById=(exerciseId)=>{\r\n        axios.get(\"http://localhost:8081/rest/exercise/\"+exerciseId)\r\n            .then(response => {\r\n                if(response.data != null) {\r\n                    this.setState({\r\n                        id: response.data.id,\r\n                        trName: response.data.trName,\r\n                        trDuration: response.data.trDuration,\r\n                        trPosition: response.data.trPosition,\r\n                        totCalories: response.data.totCalories\r\n                    });\r\n                }\r\n            }).catch((error) => {\r\n                console.error(\"Error - \"+error);\r\n            });\r\n    };\r\n\r\n    // findExerciseById=(exerciseId)=>{\r\n    //     fetch(\"http://localhost:8081/rest/exercise/\"+exerciseId)\r\n    //         .then(response=>response.json())\r\n    //         .then((exercise) => {\r\n    //             if(exercise) {\r\n    //                 this.setState({\r\n    //                     id: exercise.id,\r\n    //                     trName: exercise.trName,\r\n    //                     trDuration: exercise.trDuration,\r\n    //                     trPosition: exercise.trPosition,\r\n    //                     totCalories: exercise.totCalories\r\n    //                 });\r\n    //             }\r\n    //         }).catch((error) => {\r\n    //             console.error(\"Error - \"+error);\r\n    //         });\r\n    // };\r\n\r\n    resetExercise = () => {\r\n        this.setState(() => this.initialState);\r\n    };\r\n\r\n    submitExercise = event => {\r\n        event.preventDefault();\r\n\r\n        const exercise = {\r\n            trName: this.state.trName,\r\n            trDuration: this.state.trDuration,\r\n            trPosition: this.state.trPosition,\r\n            totCalories: this.state.totCalories\r\n        };\r\n\r\n        // axios.post(\"http://localhost:8081/rest/exercise\", exercise)\r\n        //     .then(response => {\r\n        //         if(response.data != null) {\r\n        //             this.setState({\"show\":true, \"method\":\"post\"});\r\n        //             setTimeout(() => this.setState({\"show\":false}), 3000);\r\n        //         } else {\r\n        //             this.setState({\"show\":false});\r\n        //         }\r\n        //     });\r\n\r\n        this.props.saveExercise(exercise);\r\n        setTimeout(() => {\r\n            if(this.props.exerciseObject.exercise != null) {\r\n                this.setState({\"show\":true, \"method\":\"post\"});\r\n                setTimeout(() => this.setState({\"show\":false}), 3000);\r\n            } else {\r\n                this.setState({\"show\":false});\r\n            }\r\n        }, 2000);\r\n\r\n        this.setState(this.initialState);\r\n    };\r\n\r\n    // submitExercise = event => {\r\n    //     event.preventDefault();\r\n\r\n    //     const exercise = {\r\n    //         trName: this.state.trName,\r\n    //         trDuration: this.state.trDuration,\r\n    //         trPosition: this.state.trPosition,\r\n    //         totCalories: this.state.totCalories\r\n    //     };\r\n\r\n    //     const headers= new Headers();\r\n    //     headers.append('Content-Type', 'application/json')\r\n\r\n    //     fetch(\"http://localhost:8081/rest/exercise\", {\r\n    //         method: 'POST',\r\n    //         body: JSON.stringify(exercise),\r\n    //         headers\r\n    //     })\r\n    //         .then(response=>response.json())\r\n    //         .then(exercise => {\r\n    //             if(exercise != null) {\r\n    //                 this.setState({\"show\":true, \"method\":\"post\"});\r\n    //                 setTimeout(() => this.setState({\"show\":false}), 3000);\r\n    //             } else {\r\n    //                 this.setState({\"show\":false});\r\n    //             }\r\n    //         });\r\n\r\n    //     this.setState(this.initialState);\r\n    // };\r\n\r\n    updateExercise = event => {\r\n        event.preventDefault();\r\n\r\n        const exercise = {\r\n            id: this.state.id,\r\n            trName: this.state.trName,\r\n            trDuration: this.state.trDuration,\r\n            trPosition: this.state.trPosition,\r\n            totCalories: this.state.totCalories\r\n        };\r\n\r\n        axios.put(\"http://localhost:8081/rest/exercise\", exercise)\r\n            .then(response => {\r\n                if(response.data != null) {\r\n                    this.setState({\"show\":true, \"method\":\"put\"});\r\n                    setTimeout(() => this.setState({\"show\":false}), 3000);\r\n                    setTimeout(() => this.exerciseList(), 3000);\r\n                } else {\r\n                    this.setState({\"show\":false});\r\n                }\r\n            });\r\n\r\n        this.setState(this.initialState);\r\n    };\r\n\r\n    exerciseChange=event=>{\r\n        this.setState({\r\n            [event.target.name]:event.target.value\r\n        });\r\n    };\r\n\r\n    exerciseList = () => {\r\n        return this.props.history.push(\"/list\");\r\n    };\r\n\r\n    render(){\r\n        const{trName, trDuration, trPosition, totCalories}=this.state\r\n\r\n        return(\r\n            <div>\r\n                <div style={{\"display\":this.state.show ? \"block\" : \"none\"}}>\r\n                <MyToast show = {this.state.show} message = {this.state.method === \"put\" ? \"Exercise Updated Successfully.\" : \"Exercise Saved Successfully.\"} type = {\"success\"}/>\r\n                </div>\r\n                <Card className={\"border border-dark bg-dark text-white\"}>\r\n                    <Card.Header>\r\n                    <FontAwesomeIcon icon={this.state.id ? faEdit : faPlusSquare} /> {this.state.id ? \"Update Exercise\" : \"Add Exercise\"}\r\n                    </Card.Header>\r\n                    <Form onReset={this.resetExercise} onSubmit={this.state.id ? this.updateExercise : this.submitExercise} id=\"exerciseFormId\"> \r\n                        <Card.Body>\r\n                            <Form.Row>\r\n                                <Form.Group as={Col} controlId=\"formGridName\">\r\n                                    <Form.Label>Exercise Name</Form.Label>\r\n                                    <Form.Control required autoComplete=\"off\" type=\"text\" name=\"trName\"\r\n                                    value={trName}\r\n                                    onChange={this.exerciseChange} \r\n                                    className={\"bg-dark text-white\"} placeholder=\"Exercise Name\" />\r\n                                    <Form.Text className=\"text-muted\">\r\n                                    Enter the exercise name.\r\n                                    </Form.Text>\r\n                                </Form.Group>\r\n                                <Form.Group as={Col} controlId=\"formGridDuration\">\r\n                                    <Form.Label>Exercise Duration</Form.Label>\r\n                                    <Form.Control required autoComplete=\"off\" type=\"number\" name=\"trDuration\" \r\n                                    value={trDuration}\r\n                                    onChange={this.exerciseChange}\r\n                                    className={\"bg-dark text-white\"} placeholder=\"Exercise Duration\" />\r\n                                    <Form.Text className=\"text-muted\">\r\n                                    Enter the exercise duration.\r\n                                    </Form.Text>\r\n                                </Form.Group>\r\n                            </Form.Row>\r\n                            <Form.Row>\r\n                                <Form.Group as={Col} controlId=\"formGridPosition\">\r\n                                    <Form.Label>Player Position</Form.Label>\r\n                                    <Form.Control required autoComplete=\"off\" type=\"text\" name=\"trPosition\" \r\n                                    value={trPosition}\r\n                                    onChange={this.exerciseChange}\r\n                                    className={\"bg-dark text-white\"} placeholder=\"Player Position\" />\r\n                                    <Form.Text className=\"text-muted\">\r\n                                    Enter the player position for this exercise.\r\n                                    </Form.Text>\r\n                                </Form.Group>\r\n                                {/* <Form.Group as={Col} controlId=\"formGridCoach\">\r\n                                    <Form.Label>Coach Name</Form.Label>\r\n                                    <Form.Control required autoComplete=\"off\" type=\"text\" name=\"totCalories\" \r\n                                    value={totCalories}\r\n                                    onChange={this.exerciseChange}\r\n                                    className={\"bg-dark text-white\"} placeholder=\"Coach Name\" />\r\n                                    <Form.Text className=\"text-muted\">\r\n                                    Enter the name of the coach who will lead the exercise.\r\n                                    </Form.Text>\r\n                                </Form.Group> */}\r\n                            </Form.Row>\r\n                        </Card.Body>\r\n                        <Card.Footer style={{\"textAlign\":\"right\"}}>\r\n                            <Button variant=\"success\" type=\"submit\">\r\n                                <FontAwesomeIcon icon={faSave} /> {this.state.id ? \"Update\" : \"Save\"}\r\n                            </Button>{' '}\r\n                            <Button variant=\"info\" type=\"reset\" onClick={this.exerciseList.bind()}>\r\n                                <FontAwesomeIcon icon={faList} /> Training\r\n                            </Button>\r\n                        </Card.Footer>\r\n                    </Form>\r\n                </Card>\r\n            </div>\r\n        );\r\n    }\r\n};\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        exerciseObject: state.exercise\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        saveExercise: (exercise) => dispatch(saveExercise(exercise))\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Exercise); \r\n\r\n"]},"metadata":{},"sourceType":"module"}