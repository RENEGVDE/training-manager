{"ast":null,"code":"var _jsxFileName = \"D:\\\\RENEGVDE\\\\UNIVER\\\\ITS3\\\\Project\\\\Club Management\\\\Frontend\\\\club-frontend\\\\src\\\\components\\\\Exercise.js\";\nimport React, { Component } from 'react';\nimport { Card, Form, Button, Col } from 'react-bootstrap';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faPlusSquare, faSave, faUndo, faList, faEdit } from '@fortawesome/free-solid-svg-icons';\nimport MyToast from './MyToast';\nimport axios from 'axios';\nimport { connect } from 'react-redux';\nimport { saveExercise } from '../services/index';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Exercise extends Component {\n  constructor(props) {\n    super(props);\n    this.initialState = {\n      id: '',\n      exId: '',\n      trDuration: '',\n      trPosition: '' // totCalories:''\n\n    };\n\n    this.findAllExnames = () => {\n      axios.get(\"http://localhost:8081/rest/ex/exnames\").then(response => response.data).then(data => {\n        this.setState({\n          exnames: [{\n            value: '',\n            display: 'Select Exercise'\n          }].concat(data.map(ex => {\n            return {\n              value: ex.exId,\n              display: ex.exName\n            };\n          }))\n        });\n      });\n    };\n\n    this.findExerciseById = exerciseId => {\n      axios.get(\"http://localhost:8081/rest/exercise/\" + exerciseId).then(response => {\n        if (response.data != null) {\n          this.setState({\n            id: response.data.id,\n            exId: response.data.exId,\n            trDuration: response.data.trDuration,\n            trPosition: response.data.trPosition\n          });\n        }\n      }).catch(error => {\n        console.error(\"Error - \" + error);\n      });\n    };\n\n    this.resetExercise = () => {\n      this.setState(() => this.initialState);\n    };\n\n    this.submitExercise = event => {\n      event.preventDefault();\n      const exercise = {\n        id: this.state.id,\n        exId: this.state.exId,\n        trDuration: this.state.trDuration,\n        trPosition: this.state.trPosition // totCalories: this.state.totCalories\n\n      }; // axios.post(\"http://localhost:8081/rest/exercise\", exercise)\n      //     .then(response => {\n      //         if(response.data != null) {\n      //             this.setState({\"show\":true, \"method\":\"post\"});\n      //             setTimeout(() => this.setState({\"show\":false}), 3000);\n      //         } else {\n      //             this.setState({\"show\":false});\n      //         }\n      //     });\n\n      this.props.saveExercise(exercise);\n      setTimeout(() => {\n        if (this.props.exerciseObject.exercise != null) {\n          this.setState({\n            \"show\": true,\n            \"method\": \"post\"\n          });\n          setTimeout(() => this.setState({\n            \"show\": false\n          }), 3000);\n        } else {\n          this.setState({\n            \"show\": false\n          });\n        }\n      }, 2000);\n      this.setState(this.initialState);\n    };\n\n    this.updateExercise = event => {\n      event.preventDefault();\n      const exercise = {\n        id: this.state.id,\n        exId: this.state.exId,\n        trDuration: this.state.trDuration,\n        trPosition: this.state.trPosition // totCalories: this.state.totCalories\n\n      };\n      axios.put(\"http://localhost:8081/rest/exercise\", exercise).then(response => {\n        if (response.data != null) {\n          this.setState({\n            \"show\": true,\n            \"method\": \"put\"\n          });\n          setTimeout(() => this.setState({\n            \"show\": false\n          }), 3000);\n          setTimeout(() => this.exerciseList(), 3000);\n        } else {\n          this.setState({\n            \"show\": false\n          });\n        }\n      });\n      this.setState(this.initialState);\n    };\n\n    this.exerciseChange = event => {\n      this.setState({\n        [event.target.name]: event.target.value\n      });\n    };\n\n    this.exerciseList = () => {\n      return this.props.history.push(\"/list\");\n    };\n\n    this.state = this.initialState;\n    this.state = {\n      exnames: [],\n      show: false\n    };\n    this.exerciseChange = this.exerciseChange.bind(this);\n    this.submitExercise = this.submitExercise.bind(this);\n  } // submitExercise(event){\n  //     alert(\n  //         'Name: '+this.state.nameEx+ \n  //         ', Duration: '+this.state.durationEx+\n  //         ', Position: '+this.state.positionEx+\n  //         ', Coach: '+this.state.coachEx    \n  //     );\n  //     event.preventDefault();\n  // }\n\n\n  componentDidMount() {\n    const exerciseId = +this.props.match.params.id;\n\n    if (exerciseId) {\n      this.findExerciseById(exerciseId);\n    }\n\n    this.findAllExnames();\n  }\n\n  render() {\n    const {\n      ex,\n      exId,\n      trDuration,\n      trPosition,\n      totCalories\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          \"display\": this.state.show ? \"block\" : \"none\"\n        },\n        children: /*#__PURE__*/_jsxDEV(MyToast, {\n          show: this.state.show,\n          message: this.state.method === \"put\" ? \"Exercise Updated Successfully.\" : \"Exercise Saved Successfully.\",\n          type: \"success\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 207,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 206,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Card, {\n        className: \"border border-dark bg-dark text-white\",\n        children: [/*#__PURE__*/_jsxDEV(Card.Header, {\n          children: [/*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n            icon: this.state.id ? faEdit : faPlusSquare\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 211,\n            columnNumber: 21\n          }, this), \" \", this.state.id ? \"Update Exercise\" : \"Add Exercise\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 210,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Form, {\n          onReset: this.resetExercise,\n          onSubmit: this.state.id ? this.updateExercise : this.submitExercise,\n          id: \"exerciseFormId\",\n          children: [/*#__PURE__*/_jsxDEV(Card.Body, {\n            children: [/*#__PURE__*/_jsxDEV(Form.Row, {\n              children: [/*#__PURE__*/_jsxDEV(Form.Group, {\n                as: Col,\n                controlId: \"formGridName\",\n                children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n                  children: \"Exercise Name\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 217,\n                  columnNumber: 37\n                }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n                  required: true,\n                  as: \"select\",\n                  custom: true,\n                  onChange: this.exerciseChange,\n                  name: \"exId\",\n                  value: exId.exName,\n                  className: \"bg-dark text-white\",\n                  children: this.state.exnames.map(ex => /*#__PURE__*/_jsxDEV(\"option\", {\n                    value: ex.value,\n                    children: ex.display\n                  }, ex.value, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 227,\n                    columnNumber: 45\n                  }, this))\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 222,\n                  columnNumber: 37\n                }, this), /*#__PURE__*/_jsxDEV(Form.Text, {\n                  className: \"text-muted\",\n                  children: \"Enter the exercise name.\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 232,\n                  columnNumber: 37\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 216,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n                as: Col,\n                controlId: \"formGridDuration\",\n                children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n                  children: \"Exercise Duration\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 237,\n                  columnNumber: 37\n                }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n                  required: true,\n                  autoComplete: \"off\",\n                  type: \"number\",\n                  name: \"trDuration\",\n                  value: trDuration,\n                  onChange: this.exerciseChange,\n                  className: \"bg-dark text-white\",\n                  placeholder: \"Exercise Duration\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 238,\n                  columnNumber: 37\n                }, this), /*#__PURE__*/_jsxDEV(Form.Text, {\n                  className: \"text-muted\",\n                  children: \"Enter the exercise duration.\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 242,\n                  columnNumber: 37\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 236,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 215,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Form.Row, {\n              children: [/*#__PURE__*/_jsxDEV(Form.Group, {\n                as: Col,\n                controlId: \"formGridPosition\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 248,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n                as: Col,\n                controlId: \"formGridPosition\",\n                children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n                  children: \"Player Position\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 250,\n                  columnNumber: 37\n                }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n                  required: true,\n                  autoComplete: \"off\",\n                  type: \"text\",\n                  name: \"trPosition\",\n                  value: trPosition,\n                  onChange: this.exerciseChange,\n                  className: \"bg-dark text-white\",\n                  placeholder: \"Player Position\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 251,\n                  columnNumber: 37\n                }, this), /*#__PURE__*/_jsxDEV(Form.Text, {\n                  className: \"text-muted\",\n                  children: \"Enter the player position for this exercise.\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 255,\n                  columnNumber: 37\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 249,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 247,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 214,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Card.Footer, {\n            style: {\n              \"textAlign\": \"right\"\n            },\n            children: [/*#__PURE__*/_jsxDEV(Button, {\n              variant: \"success\",\n              type: \"submit\",\n              children: [/*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n                icon: faSave\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 273,\n                columnNumber: 33\n              }, this), \" \", this.state.id ? \"Update\" : \"Save\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 272,\n              columnNumber: 29\n            }, this), ' ', /*#__PURE__*/_jsxDEV(Button, {\n              variant: \"info\",\n              type: \"reset\",\n              onClick: this.exerciseList.bind(),\n              children: [/*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n                icon: faList\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 276,\n                columnNumber: 33\n              }, this), \" Training\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 275,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 271,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 213,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 209,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 205,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\n;\n\nconst mapStateToProps = state => {\n  return {\n    exerciseObject: state.exercise\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    saveExercise: exercise => dispatch(saveExercise(exercise))\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Exercise);","map":{"version":3,"sources":["D:/RENEGVDE/UNIVER/ITS3/Project/Club Management/Frontend/club-frontend/src/components/Exercise.js"],"names":["React","Component","Card","Form","Button","Col","FontAwesomeIcon","faPlusSquare","faSave","faUndo","faList","faEdit","MyToast","axios","connect","saveExercise","Exercise","constructor","props","initialState","id","exId","trDuration","trPosition","findAllExnames","get","then","response","data","setState","exnames","value","display","concat","map","ex","exName","findExerciseById","exerciseId","catch","error","console","resetExercise","submitExercise","event","preventDefault","exercise","state","setTimeout","exerciseObject","updateExercise","put","exerciseList","exerciseChange","target","name","history","push","show","bind","componentDidMount","match","params","render","totCalories","method","mapStateToProps","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\r\n\r\nimport {Card, Form, Button, Col} from 'react-bootstrap';\r\nimport {FontAwesomeIcon} from '@fortawesome/react-fontawesome'\r\nimport {faPlusSquare, faSave, faUndo, faList, faEdit} from '@fortawesome/free-solid-svg-icons'\r\nimport MyToast from './MyToast';\r\nimport axios from 'axios';\r\nimport {connect} from 'react-redux';\r\nimport {saveExercise} from '../services/index';\r\n\r\nclass Exercise extends Component {\r\n\r\n    constructor(props){\r\n        super(props);\r\n        this.state = this.initialState;\r\n        this.state = {\r\n            exnames:[],\r\n            show:false\r\n        };\r\n        this.exerciseChange=this.exerciseChange.bind(this);\r\n        this.submitExercise=this.submitExercise.bind(this);\r\n    }\r\n\r\n    // submitExercise(event){\r\n    //     alert(\r\n    //         'Name: '+this.state.nameEx+ \r\n    //         ', Duration: '+this.state.durationEx+\r\n    //         ', Position: '+this.state.positionEx+\r\n    //         ', Coach: '+this.state.coachEx    \r\n    //     );\r\n    //     event.preventDefault();\r\n    // }\r\n\r\n    initialState={\r\n        id:'',\r\n        exId:'',\r\n        trDuration:'',\r\n        trPosition:''\r\n        // totCalories:''\r\n    };\r\n\r\n    componentDidMount() {\r\n        const exerciseId = +this.props.match.params.id;\r\n        if(exerciseId) {\r\n            this.findExerciseById(exerciseId);\r\n        }\r\n        this.findAllExnames();\r\n    }\r\n\r\n    findAllExnames = () => {\r\n        axios.get(\"http://localhost:8081/rest/ex/exnames\")\r\n            .then(response => response.data)\r\n            .then((data) => {\r\n                this.setState({\r\n                    exnames: [{value:'', display:'Select Exercise'}]\r\n                        .concat(data.map(ex => {\r\n                            return {value:ex.exId, display:ex.exName}\r\n                        }))\r\n                });\r\n            });\r\n    };\r\n\r\n    findExerciseById=(exerciseId)=>{\r\n        axios.get(\"http://localhost:8081/rest/exercise/\"+exerciseId)\r\n            .then(response => {\r\n                if(response.data != null) {\r\n                    this.setState({\r\n                        id: response.data.id,\r\n                        exId: response.data.exId,\r\n                        trDuration: response.data.trDuration,\r\n                        trPosition: response.data.trPosition,\r\n                    });\r\n                }\r\n            }).catch((error) => {\r\n                console.error(\"Error - \"+error);\r\n            });\r\n    };\r\n\r\n    // findExerciseById=(exerciseId)=>{\r\n    //     fetch(\"http://localhost:8081/rest/exercise/\"+exerciseId)\r\n    //         .then(response=>response.json())\r\n    //         .then((exercise) => {\r\n    //             if(exercise) {\r\n    //                 this.setState({\r\n    //                     id: exercise.id,\r\n    //                     exName: exercise.exName,\r\n    //                     trDuration: exercise.trDuration,\r\n    //                     trPosition: exercise.trPosition,\r\n    //                     totCalories: exercise.totCalories\r\n    //                 });\r\n    //             }\r\n    //         }).catch((error) => {\r\n    //             console.error(\"Error - \"+error);\r\n    //         });\r\n    // };\r\n\r\n    resetExercise = () => {\r\n        this.setState(() => this.initialState);\r\n    };\r\n\r\n    submitExercise = event => {\r\n        event.preventDefault();\r\n\r\n        const exercise = {\r\n            id: this.state.id,\r\n            exId: this.state.exId,\r\n            trDuration: this.state.trDuration,\r\n            trPosition: this.state.trPosition\r\n            // totCalories: this.state.totCalories\r\n        };\r\n\r\n        // axios.post(\"http://localhost:8081/rest/exercise\", exercise)\r\n        //     .then(response => {\r\n        //         if(response.data != null) {\r\n        //             this.setState({\"show\":true, \"method\":\"post\"});\r\n        //             setTimeout(() => this.setState({\"show\":false}), 3000);\r\n        //         } else {\r\n        //             this.setState({\"show\":false});\r\n        //         }\r\n        //     });\r\n\r\n        this.props.saveExercise(exercise);\r\n        setTimeout(() => {\r\n            if(this.props.exerciseObject.exercise != null) {\r\n                this.setState({\"show\":true, \"method\":\"post\"});\r\n                setTimeout(() => this.setState({\"show\":false}), 3000);\r\n            } else {\r\n                this.setState({\"show\":false});\r\n            }\r\n        }, 2000);\r\n\r\n        this.setState(this.initialState);\r\n    };\r\n\r\n    // submitExercise = event => {\r\n    //     event.preventDefault();\r\n\r\n    //     const exercise = {\r\n    //         exId: this.state.exId,\r\n    //         trDuration: this.state.trDuration,\r\n    //         trPosition: this.state.trPosition,\r\n    //         totCalories: this.state.totCalories\r\n    //     };\r\n\r\n    //     const headers= new Headers();\r\n    //     headers.append('Content-Type', 'application/json')\r\n\r\n    //     fetch(\"http://localhost:8081/rest/exercise\", {\r\n    //         method: 'POST',\r\n    //         body: JSON.stringify(exercise),\r\n    //         headers\r\n    //     })\r\n    //         .then(response=>response.json())\r\n    //         .then(exercise => {\r\n    //             if(exercise != null) {\r\n    //                 this.setState({\"show\":true, \"method\":\"post\"});\r\n    //                 setTimeout(() => this.setState({\"show\":false}), 3000);\r\n    //             } else {\r\n    //                 this.setState({\"show\":false});\r\n    //             }\r\n    //         });\r\n\r\n    //     this.setState(this.initialState);\r\n    // };\r\n\r\n    updateExercise = event => {\r\n        event.preventDefault();\r\n\r\n        const exercise = {\r\n            id: this.state.id,\r\n            exId: this.state.exId,\r\n            trDuration: this.state.trDuration,\r\n            trPosition: this.state.trPosition\r\n            // totCalories: this.state.totCalories\r\n        };\r\n\r\n        axios.put(\"http://localhost:8081/rest/exercise\", exercise)\r\n            .then(response => {\r\n                if(response.data != null) {\r\n                    this.setState({\"show\":true, \"method\":\"put\"});\r\n                    setTimeout(() => this.setState({\"show\":false}), 3000);\r\n                    setTimeout(() => this.exerciseList(), 3000);\r\n                } else {\r\n                    this.setState({\"show\":false});\r\n                }\r\n            });\r\n\r\n        this.setState(this.initialState);\r\n    };\r\n\r\n    exerciseChange=event=>{\r\n        this.setState({\r\n            [event.target.name]:event.target.value\r\n        });\r\n    };\r\n\r\n    exerciseList = () => {\r\n        return this.props.history.push(\"/list\");\r\n    };\r\n\r\n    render(){\r\n        const{ex, exId, trDuration, trPosition, totCalories}=this.state\r\n\r\n        return(\r\n            <div>\r\n                <div style={{\"display\":this.state.show ? \"block\" : \"none\"}}>\r\n                <MyToast show = {this.state.show} message = {this.state.method === \"put\" ? \"Exercise Updated Successfully.\" : \"Exercise Saved Successfully.\"} type = {\"success\"}/>\r\n                </div>\r\n                <Card className={\"border border-dark bg-dark text-white\"}>\r\n                    <Card.Header>\r\n                    <FontAwesomeIcon icon={this.state.id ? faEdit : faPlusSquare} /> {this.state.id ? \"Update Exercise\" : \"Add Exercise\"}\r\n                    </Card.Header>\r\n                    <Form onReset={this.resetExercise} onSubmit={this.state.id ? this.updateExercise : this.submitExercise} id=\"exerciseFormId\"> \r\n                        <Card.Body>\r\n                            <Form.Row>\r\n                                <Form.Group as={Col} controlId=\"formGridName\">\r\n                                    <Form.Label>Exercise Name</Form.Label>\r\n                                    {/* <Form.Control required autoComplete=\"off\" type=\"text\" name=\"exName\"\r\n                                    value={exName}\r\n                                    onChange={this.exerciseChange} \r\n                                    className={\"bg-dark text-white\"} placeholder=\"Exercise Name\" /> */}\r\n                                    <Form.Control required as=\"select\"\r\n                                        custom onChange={this.exerciseChange}\r\n                                        name=\"exId\" value={exId.exName}\r\n                                        className={\"bg-dark text-white\"}>\r\n                                        {this.state.exnames.map(ex =>\r\n                                            <option value={ex.value} key={ex.value}>\r\n                                                {ex.display}\r\n                                            </option>\r\n                                        )}\r\n                                    </Form.Control>\r\n                                    <Form.Text className=\"text-muted\">\r\n                                    Enter the exercise name.\r\n                                    </Form.Text>\r\n                                </Form.Group>\r\n                                <Form.Group as={Col} controlId=\"formGridDuration\">\r\n                                    <Form.Label>Exercise Duration</Form.Label>\r\n                                    <Form.Control required autoComplete=\"off\" type=\"number\" name=\"trDuration\" \r\n                                    value={trDuration}\r\n                                    onChange={this.exerciseChange}\r\n                                    className={\"bg-dark text-white\"} placeholder=\"Exercise Duration\" />\r\n                                    <Form.Text className=\"text-muted\">\r\n                                    Enter the exercise duration.\r\n                                    </Form.Text>\r\n                                </Form.Group>\r\n                            </Form.Row>\r\n                            <Form.Row>\r\n                                <Form.Group as={Col} controlId=\"formGridPosition\"></Form.Group>\r\n                                <Form.Group as={Col} controlId=\"formGridPosition\">\r\n                                    <Form.Label>Player Position</Form.Label>\r\n                                    <Form.Control required autoComplete=\"off\" type=\"text\" name=\"trPosition\" \r\n                                    value={trPosition}\r\n                                    onChange={this.exerciseChange}\r\n                                    className={\"bg-dark text-white\"} placeholder=\"Player Position\" />\r\n                                    <Form.Text className=\"text-muted\">\r\n                                    Enter the player position for this exercise.\r\n                                    </Form.Text>\r\n                                </Form.Group>\r\n                                {/* <Form.Group as={Col} controlId=\"formGridCoach\">\r\n                                    <Form.Label>Coach Name</Form.Label>\r\n                                    <Form.Control required autoComplete=\"off\" type=\"text\" name=\"totCalories\" \r\n                                    value={totCalories}\r\n                                    onChange={this.exerciseChange}\r\n                                    className={\"bg-dark text-white\"} placeholder=\"Coach Name\" />\r\n                                    <Form.Text className=\"text-muted\">\r\n                                    Enter the name of the coach who will lead the exercise.\r\n                                    </Form.Text>\r\n                                </Form.Group> */}\r\n                            </Form.Row>\r\n                        </Card.Body>\r\n                        <Card.Footer style={{\"textAlign\":\"right\"}}>\r\n                            <Button variant=\"success\" type=\"submit\">\r\n                                <FontAwesomeIcon icon={faSave} /> {this.state.id ? \"Update\" : \"Save\"}\r\n                            </Button>{' '}\r\n                            <Button variant=\"info\" type=\"reset\" onClick={this.exerciseList.bind()}>\r\n                                <FontAwesomeIcon icon={faList} /> Training\r\n                            </Button>\r\n                        </Card.Footer>\r\n                    </Form>\r\n                </Card>\r\n            </div>\r\n        );\r\n    }\r\n};\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        exerciseObject: state.exercise\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        saveExercise: (exercise) => dispatch(saveExercise(exercise))\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Exercise); \r\n\r\n"]},"metadata":{},"sourceType":"module"}